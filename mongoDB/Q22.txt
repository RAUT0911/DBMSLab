Create Database DYPIT using MongoDB
->use DYPIT

Create following Collections
Teachers(Tname,dno,dname,experience,salary,date_of_joining )
db.createCollection("Teachers")

Students(Sname,roll_no,class)
db.createCollection("Students")

//Insert values in Collection
// Insert values into the Teachers collection
db.Teachers.insertMany([
  {
    Tname: "John",
    dno: 1,
    dname: "Computer",
    experience: 5,
    salary: 12000,
    date_of_joining: ISODate("2020-06-15T00:00:00Z")
  },
  {
    Tname: "Alice",
    dno: 2,
    dname: "E&TC",
    experience: 8,
    salary: 11000,
    date_of_joining: ISODate("2018-03-20T00:00:00Z")
  },
  {
    Tname: "Bob",
    dno: 1,
    dname: "Computer",
    experience: 3,
    salary: 10500,
    date_of_joining: ISODate("2022-01-10T00:00:00Z")
  },
  {
    Tname: "Praveen",
    dno: 3,
    dname: "IT",
    experience: 6,
    salary: 9500,
    date_of_joining: ISODate("2019-09-05T00:00:00Z")
  }
])

// Insert values into the Students collection
db.Students.insertMany([
  {
    Sname: "Alice",
    roll_no: 1,
    class: "10th"
  },
  {
    Sname: "Bob",
    roll_no: 2,
    class: "12th"
  },
  {
    Sname: "Charlie",
    roll_no: 3,
    class: "9th"
  },
  {
    Sname: "David",
    roll_no: 4,
    class: "11th"
  }
])

1. Display the department wise average salary
db.Teachers.aggregate([
  {
    $group: {
      _id: "$dname",
      avgSalary: { $avg: "$salary" }
    }
  }
])


2. display the no. Of employees working in each department
db.Teachers.aggregate([
  {
    $group: {
      _id: "$dname",
      count: { $sum: 1 }
    }
  }
])

3. Display the department wise total salary of departments having total salary greater than 
or equals to 50000/-
db.Teachers.aggregate([
  {
    $group: {
      _id: "$dname",
      totalSalary: { $sum: "$salary" }
    }
  },
  {
    $match: {
      totalSalary: { $gte: 50000 }
    }
  }
])

4. Write the queries using the different operators like max, min. Etc.
// Maximum salary in the Teachers collection
db.Teachers.aggregate([
  {
    $group: {
      _id: null,
      maxSalary: { $max: "$salary" }
    }
  }
])

// Minimum experience in the Teachers collection
db.Teachers.aggregate([
  {
    $group: {
      _id: null,
      minExperience: { $min: "$experience" }
    }
  }
])

5. Create unique index on any field for above given collections
db.Teachers.createIndex({ Tname: 1 }, { unique: true })

6. Create compound index on any fields for above given collections
db.Teachers.createIndex({ dno: 1, dname: 1 })

7. Show all the indexes created in the database DYPIT
db.getCollectionNames().forEach(function (collection) {
  var indexes = db[collection].getIndexes();
  print("Indexes for " + collection + ":");
  indexes.forEach(function (index) {
    printjson(index);
  });
  print("\n");
})

8. Show all the indexes created in above collections.
// Indexes for Teachers collection
db.Teachers.getIndexes()

// Indexes for Students collection
db.Students.getIndexes()
