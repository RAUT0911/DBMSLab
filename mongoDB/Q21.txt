Create Database DYPIT using MongoDB
-> use DYPIT

Create following Collections
Teachers(Tname,dno,dname,experience,salary,date_of_joining )
->db.createCollection("Teachers")

Students(Sname,roll_no,class)
->db.createCollection("Students")

//INSERT VALUES
db.Teachers.insertMany([
  {
    Tname: "John",
    dno: 1,
    dname: "Computer",
    experience: 5,
    salary: 12000,
    date_of_joining: ISODate("2020-06-15T00:00:00Z")
  },
  {
    Tname: "Alice",
    dno: 2,
    dname: "E&TC",
    experience: 8,
    salary: 11000,
    date_of_joining: ISODate("2018-03-20T00:00:00Z")
  },
  {
    Tname: "Bob",
    dno: 1,
    dname: "Computer",
    experience: 3,
    salary: 10500,
    date_of_joining: ISODate("2022-01-10T00:00:00Z")
  },
  {
    Tname: "Praveen",
    dno: 3,
    dname: "IT",
    experience: 6,
    salary: 9500,
    date_of_joining: ISODate("2019-09-05T00:00:00Z")
  }
])

//Student Collection

db.Students.insertMany([
  {
    Sname: "Alice",
    roll_no: 1,
    class: "10th"
  },
  {
    Sname: "Bob",
    roll_no: 2,
    class: "12th"
  },
  {
    Sname: "Charlie",
    roll_no: 3,
    class: "9th"
  },
  {
    Sname: "David",
    roll_no: 4,
    class: "11th"
  }
])


1. Find the information about all teachers
db.Teachers.find({})

2. Find the average salary teachers of computer department
db.Teachers.aggregate([
  { $match: { dname: "Computer" } },
  {
    $group: {
      _id: null,
      avgSalary: { $avg: "$salary" }
    }
  }
])

3. Find the minimum and maximum salary of e&TC department teachers
-> db.Teachers.aggregate([
  { $match: { dname: "E&TC" } },
  {
    $group: {
      _id: null,
      minSalary: { $min: "$salary" },
      maxSalary: { $max: "$salary" }
    }
  }
])

4. Find the information about all teachers of computer,IT,and E&TC department having 
salary greate than or equl to 10000/-
-> db.Teachers.find({ dname: { $in: ["Computer", "IT", "E&TC"] }, salary: { $gte: 10000 } })

5. Find the student information having roll_no = 2 or Sname=xyz
-> db.Students.find({ $or: [{ roll_no: 2 }, { Sname: "xyz" }] })

6. Update the experience of teacher-praveen to 10years, if the entry is not available in 
database consider the entry as new entry.
-> db.Teachers.update(
  { Tname: "praveen" },
  {
    $set: {
      Tname: "praveen",
      experience: 10,
      dno: 1,
      dname: "Computer",
      salary: 10000,
      date_of_joining: ISODate("2023-11-07T00:00:00Z")
    }
  },
  { upsert: true }
)

7. Update the deparment of all the teachers working in IT deprtment to COMP
-> db.Teachers.update(
  { dname: "IT" },
  { $set: { dname: "COMP" } },
  { multi: true }
)

8. find the teachers name and their experience from teachers collection
-> db.Teachers.find({}, { Tname: 1, experience: 1, _id: 0 })

9. Using Save() method insert one entry in department collection
-> db.Department.save({
  dno: 1,
  dname: "Computer"
})

10. Find the total salary all teachers 
-> db.Teachers.aggregate([
  {
    $group: {
      _id: null,
      totalSalary: { $sum: "$salary" }
    }
  }
])

