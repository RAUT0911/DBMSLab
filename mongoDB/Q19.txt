C:\Users\prash>mongosh
Current Mongosh Log ID: 6548fdfcacb33f53a088193d
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.0.2
Using MongoDB:          7.0.2
Using Mongosh:          2.0.2

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2023-11-01T18:16:18.187+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> use DYPIT
switched to db DYPIT
DYPIT> db.createCollection("Teachers")
{ ok: 1 }
DYPIT> db.createCollection("Students")
{ ok: 1 }
DYPIT> db.Teachers.insertMany([
...   { Tname: "John", dno: 101, dname: "Computer", experience: 5, salary: 12000, date_of_joining: ISODate("2022-01-10") },
...   { Tname: "Mary", dno: 102, dname: "IT", experience: 7, salary: 11000,
date_of_joining: ISODate("2020-05-15") },
...   { Tname: "Alice", dno: 103, dname: "E&TC", experience: 3, salary: 9000, date_of_joining: ISODate("2021-11-20") },
...   { Tname: "Praveen", dno: 101, dname: "Computer", experience: 8, salarysalary: 13000, date_of_joining: ISODate("2019-03-01") }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("6548fe3bacb33f53a088193e"),
    '1': ObjectId("6548fe3bacb33f53a088193f"),
    '2': ObjectId("6548fe3bacb33f53a0881940"),
    '3': ObjectId("6548fe3bacb33f53a0881941")
  }
}
DYPIT> db.Students.insertMany([
...   { Sname: "Alex", roll_no: 1, class: "A" },
...   { Sname: "Emma", roll_no: 2, class: "B" },
...   { Sname: "Oliver", roll_no: 3, class: "A" },
...   { Sname: "Sophia", roll_no: 4, class: "C" }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("6548fe4bacb33f53a0881942"),
    '1': ObjectId("6548fe4bacb33f53a0881943"),
    '2': ObjectId("6548fe4bacb33f53a0881944"),
    '3': ObjectId("6548fe4bacb33f53a0881945")
  }
}

1. Find the information about all teachers
db.Teachers.find()

2.Find the information about all teachers of the Computer department
db.Teachers.find({ dname: "Computer" })

3.Find the information about all teachers of Computer, IT, and E&TC department:
db.Teachers.find({ dname: { $in: ["Computer", "IT", "E&TC"] } })


4.Find the information about all teachers of Computer, IT, and E&TC department having salary greater than or equal to 10,000:
db.Teachers.find({ dname: { $in: ["Computer", "IT", "E&TC"] }, salary: { $gte: 10000 } })


5.Find the student information having roll_no = 2 or Sname = "xyz":
db.Students.find({ $or: [{ roll_no: 2 }, { Sname: "xyz" }] })

6.Update the experience of teacher "Praveen" to 10 years, considering it as a new entry if not available
db.Teachers.update({ Tname: "Praveen" }, { $set: { experience: 10 } }, { upsert: true })

7.Update the department of all the teachers working in the IT department to "COMP".
db.Teachers.updateMany({ dname: "IT" }, { $set: { dname: "COMP" } })

8.Find the teachers' names and their experience from the "Teachers" collection
db.Teachers.find({}, { Tname: 1, experience: 1 })

9.Using save() method, insert one entry in the "Department" collection
db.createCollection("Department")

db.Department.insertOne({
  dept_name: "HR",
  location: "Block A"
})


10.Using save() method, change the department of teacher "Rajesh" to "IT"
db.Teachers.update({ Tname: "Rajesh" }, { $set: { dname: "IT" } })

11.Delete all the documents from the "Teachers" collection having the "IT" department
db.Teachers.deleteMany({ dname: "IT" })

12.Display the first 3 documents in the "Teachers" collection in ascending order with the pretty() method
db.Teachers.find().sort({ Tname: 1 }).limit(3).pretty()










